#include <iostream>
#include <stdlib.h>
#include<stdio.h>
//on deletion replace root by smallest node on rt sub-tree

using namespace std;

struct AVLNode
{
	int key;
	int value;
	int balance_factor;
	AVLNode *left;
	AVLNode *right;
};
 
class avltree
{
	private:
		AVLNode *root;
	public:
		avltree();
		void create_root(AVLNode *avl);
		AVLNode* searchtree(AVLNode *root,int key);
		static AVLNode* insert(AVLNode *root,int key,int value,int *h);
		void display_inorder(AVLNode *root);
		void display_postorder(AVLNode *root);
};


avltree:: avltree()
{
	root=NULL;
}

void avltree::create_root (AVLNode *avl)
{
	root=avl;
}



AVLNode* avltree::insert(AVLNode *root,int key,int value,int *bf_update_reqd)
{
	AVLNode *temp_node_1,*temp_node_2;
 
	//if tree empty,just create a new node with the given key and make it the root
	if(root==NULL)
	{
		root=new AVLNode;
		root->key=key;
		root->value=value;
		root->left=NULL;
		root->right=NULL;
		root->balance_factor=0;
		*h=1;
		return root;
	}

	//if key< root's key,move to left
	if(key<root->key)
	{
		root->left=insert(root->left,key,value,h);
 
		// if left subtree is higher
		if(*h)
		{
			//adjustment required,balance_factor becomes 2
			if(root->balance_factor==1)
			{
				temp_node_1=root->left;
				//LL rotation
				if(temp_node_1->balance_factor==1)
				{
					root->left=temp_node_1->right;
					temp_node_1->right=root;
					root->balance_factor=0;
					root=temp_node_1;
				}
				else	//LR rotation
				{
					temp_node_2=temp_node_1->right;
					temp_node_1->right=temp_node_2->left;
					temp_node_2->left=temp_node_1;
					root->left=temp_node_2->right;
					temp_node_2->right=root;
					if(temp_node_2->balance_factor==1)
						root->balance_factor=-1;
					else
						root->balance_factor=0;
					if(temp_node_2->balance_factor==-1)
						temp_node_1->balance_factor=1;
					else
						temp_node_1->balance_factor=0;
					root=temp_node_2;
				}
				root->balance_factor=0;
				*h=0;
			}
 
			else if(root->balance_factor==0)
				root->balance_factor=1;

			else if(root->balance_factor==-1)
			{	
				root->balance_factor=0;
				*h=0;
			}
		}
	}
 
	//if key> root's key,move to right
	if(key>root->key)
	{
		root->right=insert (root->right,key,value,h);
 
		if(*h)
		{
			if(root->balance_factor==1)
			{
				root->balance_factor=0;
				*h=0;
			}

			else if(root->balance_factor==0)
					root->balance_factor=-1;
			
			else if(root->balance_factor==-1)	
			//adjustment required,balance_factor becomes -2
			{	
				temp_node_1=root->right;
				//RR rotation
				if(temp_node_1->balance_factor==-1)
				{
					root->right=temp_node_1->left;
					temp_node_1->left=root;
					root->balance_factor=0;
					root=temp_node_1;
				}
				else	//RL rotation
				{
					temp_node_2=temp_node_1->left;
					temp_node_1->left=temp_node_2->right;
					temp_node_2->right=temp_node_1;
					root->right=temp_node_2->left;
					temp_node_2->left=root;
					if(temp_node_2->balance_factor==-1)
						root->balance_factor=1;
					else
						root->balance_factor=0;
					if(temp_node_2->balance_factor==1)
						temp_node_1->balance_factor=-1;
					else
						temp_node_1->balance_factor=0;
					root=temp_node_2;
				}
				root->balance_factor=0;
				*h=0;
			}
		}
	}
	return root;
}


AVLNode* avltree:: searchtree (AVLNode *root,int key)
{
	AVLNode *temp_node_1,*temp_node_2;
 
	//ifNULL ptr encountered,Not Found
	if(root==NULL)
		return NULL;

	if(root->key==key)
		return root;	

	//ifkey< root's key,move to left
	if(key<root->key)
	{
		temp_node_1=searchtree(root->left,key);
		return temp_node_1;
	}
 
	//ifkey> root's key,move to right
	if(key>root->key)
	{
		temp_node_2=searchtree(root->right,key);
		return temp_node_2;
 	}
}


void avltree:: display_inorder (AVLNode* root)
{
	if(root != NULL)
	{
		display_inorder (root->left);
		printf("%d ",root->key);
		display_inorder (root->right);
	}
}

void avltree:: display_postorder (AVLNode* root)
{
	if(root != NULL)
	{
		display_postorder (root->left);
		display_postorder (root->right);
		printf("%d ",root->key);
	}
}


